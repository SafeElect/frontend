import Head from "next/head";
import Layout from "../../src/components/Layout/Layout";
import styles from "../Home.module.scss";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import CardMedia from "@mui/material/CardMedia";
import Typography from "@mui/material/Typography";
import { Button, CardActionArea, CardActions, Slide } from "@mui/material";
import DetailPage from "../../src/components/DetailPage/DetailPage";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
// import "reactjs-popup/dist/index.css";
import React from "react";
import styled from "@emotion/styled";
import Link from "next/link";

const VotingPanel = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 950px;
  margin-left: auto;
  margin-right: auto;
  justify-content: center;
  padding: 5rem 0rem;
  background: #be93c5; /* fallback for old browsers */
  background: -webkit-linear-gradient(
    to right,
    #7bc6cc,
    #be93c5
  ); /* Chrome 10-25, Safari 5.1-6 */
  background: linear-gradient(
    to right,
    #7bc6cc,
    #be93c5
  ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}
`;
const CandidateCard = styled.div`
  flex: 1 0 50%;
  margin: 5px;
  height: 250px;
  max-width: 350px;
`;
const CandidateImage = styled.div`
  flex: 1 0 50%;
  img {
    max-width: 250px;
  }
`;
const DialogBox = styled.div`
  .MuiDialogContent-root {
    display: flex;
  }
`;
const candidates = {
  cd1: "Bill Gates",
  cd2: "Tim Cook",
  cd3: "Jeff Bezos",
  cd4: "Elon Musk",
};

function Vote() {
  const [open, setOpen] = React.useState(false);
  const [selectedCandidate, setSelectedCandidate] = React.useState("");

  const handleClickOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const handleVote = () => {
    //TODO
    //send voting data to BE
    //selectedCandidate has the candidate key

    setOpen(false);
  };

  return (
    <>
      <Layout>
        <DetailPage breadCrumbClass="header-height" pageTitle=" ">
          <div className={styles.homePageContainer}>
            <Head>
              <title>Safe Elect</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/vote.png" />
            </Head>
            <h5>
              Please select the candidate that you would like to vote for.
            </h5>
            <VotingPanel>
              {Object.keys(candidates).map((key, i) => (
                <CandidateCard key={i}>
                  <Card sx={{ maxWidth: 345 }}>
                    <CardActionArea
                      onClick={() => {
                        setSelectedCandidate(key);
                        handleClickOpen();
                      }}
                    >
                      <CardMedia
                        component="img"
                        width="180"
                        height="180px"
                        image={"/images/vote/" + key + ".jpeg"}
                        alt={key}
                      />
                      <CardContent>
                        <Typography gutterBottom variant="h5" component="div">
                          {(candidates as any)[key]}
                        </Typography>
                      </CardContent>
                    </CardActionArea>
                  </Card>
                </CandidateCard>
              ))}
            </VotingPanel>
            <Dialog
              open={open}
              keepMounted
              onClose={handleClose}
              aria-describedby="alert-dialog-slide-description"
            >
              <DialogBox>
                <DialogContent>
                  <CandidateImage>
                    <img
                      src={"/images/vote/" + selectedCandidate + ".jpeg"}
                      alt=""
                    />
                  </CandidateImage>
                  <DialogContentText id="alert-dialog-slide-description">
                    Are you sure that you want to vote for{" "}
                    {(candidates as any)[selectedCandidate]}? Once you have
                    voted, the action will be irreversible.
                  </DialogContentText>
                </DialogContent>
              </DialogBox>

              <DialogActions>
                <Button onClick={handleClose}>Cancel</Button>
                <Link href="/successfulvote">
                  <Button onClick={handleVote}>Vote</Button>
                </Link>
              </DialogActions>
            </Dialog>
          </div>
        </DetailPage>
      </Layout>
    </>
  );
}

export default Vote;
